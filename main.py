import os
import asyncio
from flask import Flask
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# üîπ –ó—á–∏—Ç—É—î–º–æ –∑–º—ñ–Ω–Ω—ñ —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ –∑ Render
BOT_TOKEN = os.getenv("BOT_TOKEN")
GROUP_ID = os.getenv("GROUP_ID")
ADMIN_ID = os.getenv("ADMIN_ID")

print("=== DEBUG INFO ===")
print("BOT_TOKEN:", BOT_TOKEN)
print("GROUP_ID:", GROUP_ID)
print("ADMIN_ID:", ADMIN_ID)
print("===================")

if not BOT_TOKEN:
    raise ValueError("‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ! –ü–µ—Ä–µ–≤—ñ—Ä Environment Variables —É Render!")

# üîπ Flask –∑–∞—Å—Ç–æ—Å—É–Ω–æ–∫ –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ –∂–∏–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—É
app = Flask(__name__)

@app.route('/')
def home():
    return "‚úÖ Bot is running!"

# üîπ –û—Å–Ω–æ–≤–Ω–∞ –ª–æ–≥—ñ–∫–∞ –±–æ—Ç–∞
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message:
        return

    user_message = update.message.text
    user = update.message.from_user

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    try:
        await update.message.delete()
    except Exception as e:
        print("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –≤–∏–¥–∞–ª–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:", e)

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –º–æ–¥–µ—Ä–∞—Ü—ñ—é
    msg = await update.message.reply_text("üïì –í–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é.")
    await asyncio.sleep(5)
    try:
        await msg.delete()
    except:
        pass

    # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∞–¥–º—ñ–Ω—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è
    keyboard = [
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve|{user.id}|{user_message}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject|{user.id}|{user_message}"),
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    text = f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.first_name}:\n\n{user_message}"
    await context.bot.send_message(chat_id=ADMIN_ID, text=text, reply_markup=reply_markup)

# üîπ –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–æ–∫ (—Å—Ö–≤–∞–ª–∏—Ç–∏/–≤—ñ–¥—Ö–∏–ª–∏—Ç–∏)
async def callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data.split("|")
    action = data[0]
    user_id = data[1]
    user_message = data[2]

    if action == "approve":
        await context.bot.send_message(chat_id=GROUP_ID, text=user_message)
        await query.edit_message_text("‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Å—Ö–≤–∞–ª–µ–Ω–æ —Ç–∞ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
    else:
        await query.edit_message_text("‚ùå –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")

# üîπ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞
async def run_bot():
    application = ApplicationBuilder().token(BOT_TOKEN).build()

    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(callback_query))

    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!")
    await application.run_polling()

# üîπ –ì–æ–ª–æ–≤–Ω–∏–π –≤—Ö—ñ–¥
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(run_bot())
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 5000)))
