import os
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    ContextTypes,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
)

# üîπ –¢–≤—ñ–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = os.getenv("BOT_TOKEN")

# üîπ ID —á–∞—Ç—É –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (–∫–æ–º—É –ø—Ä–∏—Ö–æ–¥—è—Ç—å –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é)
ADMIN_ID = int(os.getenv("ADMIN_ID"))

# üîπ ID –≥—Ä—É–ø–∏, –∫—É–¥–∏ –ø—É–±–ª—ñ–∫—É—é—Ç—å—Å—è —Å—Ö–≤–∞–ª–µ–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
GROUP_ID = int(os.getenv("GROUP_ID"))

# üß† /start –∫–æ–º–∞–Ω–¥–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üëã –ü—Ä–∏–≤—ñ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü—ñ—ó –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ.")

# üß† –û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –≥—Ä—É–ø—ñ
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    message_id = update.message.message_id

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –ø—Ä–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    context.user_data[message_id] = {
        "user_id": user.id,
        "username": user.username or user.first_name,
        "text": text
    }

    # –ö–Ω–æ–ø–∫–∏ —Å—Ö–≤–∞–ª–µ–Ω–Ω—è/–≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è
    keyboard = InlineKeyboardMarkup([
        [
            InlineKeyboardButton("‚úÖ –°—Ö–≤–∞–ª–∏—Ç–∏", callback_data=f"approve|{message_id}"),
            InlineKeyboardButton("‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject|{message_id}")
        ]
    ])

    # –ù–∞–¥—Å–∏–ª–∞—î–º–æ –∞–¥–º—ñ–Ω—É
    await context.bot.send_message(
        chat_id=ADMIN_ID,
        text=f"–ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.first_name}:\n\n{text}",
        reply_markup=keyboard
    )

    # –í–∏–¥–∞–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await update.message.delete()

    # –¢–∏–º—á–∞—Å–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    reply = await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text=f"@{user.username or user.first_name}, –≤–∞—à–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–ª–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü—ñ—é ‚úÖ"
    )

    # –ß–µ–∫–∞—î–º–æ 5 —Å–µ–∫—É–Ω–¥ —ñ –≤–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await asyncio.sleep(5)
    await reply.delete()

# üß† –û–±—Ä–æ–±–∫–∞ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ (–º–æ–¥–µ—Ä–∞—Ü—ñ—è)
async def callback_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    action, message_id_str = query.data.split("|")
    message_id = int(message_id_str)

    # –î—ñ—Å—Ç–∞—î–º–æ –¥–∞–Ω—ñ
    data = context.user_data.get(message_id)
    if not data:
        await query.answer("–î–∞–Ω—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ‚ùå", show_alert=True)
        return

    username = data["username"]
    text = data["text"]

    if action == "approve":
        # –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É –≥—Ä—É–ø—É —Å—Ö–≤–∞–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        await context.bot.send_message(
            chat_id=GROUP_ID,
            text=f"üì© –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥ @{username}:\n\n{text}"
        )
        await query.answer("‚úÖ –°—Ö–≤–∞–ª–µ–Ω–æ")
    elif action == "reject":
        await query.answer("‚ùå –í—ñ–¥—Ö–∏–ª–µ–Ω–æ")

    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –ø—ñ—Å–ª—è –≤–∏–±–æ—Ä—É
    await query.message.delete()

# üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ ID –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
    app.bot_data["ADMIN_ID"] = ADMIN_ID
    app.bot_data["GROUP_ID"] = GROUP_ID

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & filters.ChatType.GROUPS, handle_message))
    app.add_handler(CallbackQueryHandler(callback_query))

    app.run_polling()

if __name__ == "__main__":
    main()
